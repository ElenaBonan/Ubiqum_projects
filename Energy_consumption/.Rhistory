print(t)
# I create a new dataset where I am going to apply the substitution.
mydata = data
#create a list with the dates where I want to substitute the null values with 0.
l = c()
for (i in 1:length(row.names(t)))
{
if (t[i]>=178)
{l = c(l, row.names(t)[i])}
}
a = which( (as.character(mydata$Date) %in% l) & is.na(mydata$Global_active_power) )
mydata[a,3:9] = c(0,0,0,0,0,0,0)
# For the remaining days we substitute the null values with the previous no-null value
for (i in 3:9)
{
mydata[,i] = na_locf(mydata[,i], option='locf')
}
dayconsidered = subset( mydata, day(Date)==8 & month(Date)==10 & year(Date) == 2010)
g =ggplot(dayconsidered,aes(x = c(1:1440), y = Sub_metering_1))+ geom_point()+geom_line()+
ggtitle(paste('Date:', weekdays(dayconsidered$Date[1]), dayconsidered$Date[1]))+xlab('minutes')+
ylab('Sub metering 1')+theme_minimal()
print(g)
dayconsidered = subset( mydata, day(Date)==8 & month(Date)==10 & year(Date) == 2010)
g =ggplot(dayconsidered,aes(x = c(1:1440), y = Sub_metering_1))+ geom_point()+geom_line()+
ggtitle(paste('Date:', weekdays(dayconsidered$Date[1], "Dishwasher"), dayconsidered$Date[1]))+xlab('minutes')+
ylab('Sub metering 1')+theme_minimal()
dayconsidered = subset( mydata, day(Date)==8 & month(Date)==10 & year(Date) == 2010)
g =ggplot(dayconsidered,aes(x = c(1:1440), y = Sub_metering_1))+ geom_point()+geom_line()+
ggtitle(paste('Date:', weekdays(dayconsidered$Date[1]), dayconsidered$Date[1]))+xlab('minutes')+
ylab('Sub metering 1')+theme_minimal()
print(g)
"c" + "f"
dayconsidered = subset( mydata, day(Date)==8 & month(Date)==10 & year(Date) == 2010)
g =ggplot(dayconsidered[c(1000:1440),],aes(x = c(1000:1440), y = Sub_metering_1))+ geom_point()+geom_line()+
ggtitle(paste(paste('Date:', weekdays(dayconsidered$Date[1]),"Dishwasher"), dayconsidered$Date[1]))+xlab('minutes')+
ylab('Sub metering 1')+theme_minimal()
print(g)
dayconsidered = subset( mydata, day(Date)==8 & month(Date)==10 & year(Date) == 2010)
g =ggplot(dayconsidered[c(1200:1440),],aes(x = c(1200:1440), y = Sub_metering_1))+ geom_point()+geom_line()+
ggtitle(paste(paste('Date:', weekdays(dayconsidered$Date[1]),"Dishwasher"), dayconsidered$Date[1]))+xlab('minutes')+
ylab('Sub metering 1')+theme_minimal()
print(g)
dayconsidered = subset( mydata, day(Date)==8 & month(Date)==10 & year(Date) == 2010)
g =ggplot(dayconsidered[c(1200:1440),],aes(x = c(1200:1440), y = Sub_metering_1))+ geom_point()+geom_line()+
ggtitle(paste('Date:', weekdays(dayconsidered$Date[1]), dayconsidered$Date[1]), Dishwasher)+xlab('minutes')+
ylab('Sub metering 1')+theme_minimal()
dayconsidered = subset( mydata, day(Date)==8 & month(Date)==10 & year(Date) == 2010)
g =ggplot(dayconsidered[c(1200:1440),],aes(x = c(1200:1440), y = Sub_metering_1))+ geom_point()+geom_line()+
ggtitle(paste('Date:', weekdays(dayconsidered$Date[1]), dayconsidered$Date[1]), "dishwasher")+xlab('minutes')+
ylab('Sub metering 1')+theme_minimal()
print(g)
dayconsidered = subset( mydata, day(Date)==8 & month(Date)==10 & year(Date) == 2010)
g =ggplot(dayconsidered,aes(x = c(1:1440), y = Sub_metering_2))+ geom_point()+geom_line()+
ggtitle(paste('Date:', weekdays(dayconsidered$Date[1]), dayconsidered$Date[1], "fridge"))+xlab('minutes')+
ylab('Sub metering 2')+theme_minimal()
print(g)
summary(mydata)
g =ggplot(dayconsidered,aes(x = c(1:1440), y = Sub_metering_2))+ geom_point()+geom_line()+
ggtitle(paste('Date:', weekdays(dayconsidered$Date[1]), dayconsidered$Date[1], "fridge"))+xlab('minutes')+
ylab('Sub metering 2')+theme_minimal()
print(g)
dayconsidered = subset( mydata, day(Date)==8 & month(Date)==10 & year(Date) == 2010)
g =ggplot(dayconsidered,aes(x = c(1:1440), y = Sub_metering_2))+ geom_point()+geom_line()+
ggtitle(paste('Date:', weekdays(dayconsidered$Date[1]), dayconsidered$Date[1], "fridge"))+xlab('minutes')+
ylab('Sub metering 2')+theme_minimal()
print(g)
dayconsidered = subset( mydata, day(Date)==8 & month(Date)==10 & year(Date) == 2010)
g =ggplot(dayconsidered,aes(x = c(1:1440), y = other))+ geom_point()+geom_line()+
ggtitle(paste('Date:', weekdays(dayconsidered$Date[1]), dayconsidered$Date[1]))+xlab('minutes')+
ylab('Other consumption')+theme_minimal()
print(g)
#create a column with energy not used in submetering 1,2,3
mydata$other = as.numeric(mydata$Global_active_power-mydata$Sub_metering_1-mydata$Sub_metering_2-mydata$Sub_metering_3)
dayconsidered = subset( mydata, day(Date)==8 & month(Date)==10 & year(Date) == 2010)
g =ggplot(dayconsidered,aes(x = c(1:1440), y = other))+ geom_point()+geom_line()+
ggtitle(paste('Date:', weekdays(dayconsidered$Date[1]), dayconsidered$Date[1]))+xlab('minutes')+
ylab('Other consumption')+theme_minimal()
print(g)
dayconsidered = subset( mydata, day(Date)==8 & month(Date)==10 & year(Date) == 2010)
g =ggplot(dayconsidered,aes(x = c(1:1440), y = Sub_metering_2))+ geom_point()+geom_line()+
ggtitle(paste('Date:', weekdays(dayconsidered$Date[1]), dayconsidered$Date[1]), "fridge")+xlab('minutes')+
ylab('Sub metering 2')+theme_minimal()
print(g)
# Example of the energy consumption during the day
dayconsidered = subset(mydatahours, day(Date)== 5& month(Date)==3 & year(Date) == 2010)
g =ggplot(dayconsidered,aes(x = c(1:24), y = Global_active_power))+ geom_point()+geom_line()+
ggtitle(paste('Date:', weekdays(dayconsidered$Date[1]), dayconsidered$Date[1]))+xlab("hour")+theme_minimal()
print(g) }
head(mydata)
# First we aggregate the energy by hour.
mydatah= mydata[,2:ncol(mydata)]
mydatah$hour = format( mydata$DateTime, format="%H")
mydatahours = data.frame(mydatah %>% group_by(Date, hour ) %>% summarise_all(sum))
# We plot the energy consumption in one specific day
dayconsidered = subset(mydatahours, day(Date)== 5& month(Date)==3 & year(Date) == 2010)
g =ggplot(dayconsidered,aes(x = c(1:24), y = Global_active_power))+ geom_point()+geom_line()+
ggtitle(paste('Date:', weekdays(dayconsidered$Date[1]), dayconsidered$Date[1]))+xlab("hour")+theme_minimal()
print(g)
mydatamonth = mydata
mydatamonth$monthyear = format(mydata$Date, "%Y-%m")
mydatamonth$DateTime = NULL
mydatamonth$Date = NULL
mydatamonths = mydatamonth %>%  group_by(monthyear) %>%  summarize_all(sum)
warings()
warnings()
mydatamonth = mydata
mydatamonth$monthyear = format(mydata$Date, "%Y-%m")
mydatamonth$Date = NULL
mydatamonth$DateTime = NULL
mydatamonths = mydatamonth %>%  group_by(monthyear) %>%  summarize_all(sum)
View(mydatamonth)
View(mydatamonth)
View(mydatamonths)
ggplot(data=mydatamonths[c(2:48),], aes(x=as.factor(`month(Date)`), y= Global_active_power, group=as.factor( monthyear))) +
geom_line(aes(color= as.factor(monthyear)))+
geom_point()+
theme(legend.position="top")+labs(y= "Global active energy", x = "Months", color=' Years')
Date(mydatamonths$monthyear)
Year(mydatamonths$monthyear)
year(mydatamonths$monthyear)
substring(mydatamonths$monthyear,1,4)
mydatamonths$year = as.factor(substring(mydatamonths$monthyear,1,4))
mydatamonths$year = as.factor(substring(mydatamonths$monthyear,6,8))
mydatamonths$year = as.factor(substring(mydatamonths$monthyear,1,4))
mydatamonths$month = as.factor(substring(mydatamonths$monthyear,6,8))
ggplot(data=mydatamonths[c(2:48),], aes(x=month, y= Global_active_power, group= year)) +
geom_line(aes(color= year))+
geom_point()+
theme(legend.position="top")+labs(y= "Global active energy", x = "Months", color=' Years')
ggplot(data=mydatamonths[c(2:48),], aes(x=month, y= Global_active_power, group= year)) +
geom_line(aes(color= year))+
geom_point()+
theme(legend.position="top")+labs(y= "Global active energy", x = "Month", color=' Years')+theme_minimal()
mydatayears = data.frame(mydata[,2:ncol(mydatamonths)-1] %>% group_by(year) %>% summarize_all(sum))
mydatayears = data.frame(mydatamonths[,2:ncol(mydatamonths)-1] %>% group_by(year) %>% summarize_all(sum))
mydatayears = data.frame(mydatamonths[,2: (ncol(mydatamonths)-1)] %>% group_by(year) %>% summarize_all(sum))
View(mydatayears)
ds <- data.frame(labels = c("Sub-metering 1", "Sub-metering 2", "Submetering 3", 'Other energy used'), values = unlist(mydatayears[4,c(6,7,8,9)]))
plot_ly(ds, labels = ~labels, values = ~values) %>%
add_pie() %>%
layout(title = "2009")
plotly(ds, labels = ~labels, values = ~values) %>%
add_pie() %>%
layout(title = "2009")
plot_ly(ds, labels = labels, values = values) %>%
add_pie() %>%
layout(title = "2009")
plot_ly(ds, labels = ~labels, values = ~values) %>%add_pie()
plot_ly(ds, labels = ~labels, values = ~values) %>%add_pie() %>% layout(title = "2009")
# First we group the enrgy by year
mydatayears = data.frame(mydatamonths[,2: (ncol(mydatamonths)-1)] %>% group_by(year) %>% summarize_all(sum))
# Then we can plot the pie chart for one year.
ds <- data.frame(labels = c("Sub-metering 1", "Sub-metering 2", "Submetering 3", 'Other energy used'), values = unlist(mydatayears[4,c(6,7,8,9)]))
plot_ly(ds, labels = ~labels, values = ~values) %>%add_pie() %>% layout(title = "2009")
prova = data.frame(c(1:12),mydatamonths[c(26:37),])
prova = data.frame(c(1:12),mydatamonths[c(26:37),])
p <- plot_ly(prova, x = c(1:12), y = ~Sub_metering_1, type = 'bar', name = 'Sub metering 1') %>%
add_trace(y = ~Sub_metering_2, name = 'Sub metering 2') %>%
add_trace(y = ~Sub_metering_3, name = 'Sub metering 3') %>%
add_trace(y =~other, name = 'Other energy used') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
plot_ly(prova, x = c(1:12), y = ~Sub_metering_1, type = 'bar', name = 'Sub metering 1') %>%
add_trace(y = ~Sub_metering_2, name = 'Sub metering 2') %>%
add_trace(y = ~Sub_metering_3, name = 'Sub metering 3') %>%
add_trace(y =~other, name = 'Other energy used') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
plot_ly(prova, x = c(1:12), y = ~Sub_metering_1, type = 'bar', name = 'Sub metering 1') %>%
add_trace(y = ~Sub_metering_2, name = 'Sub metering 2') %>%
add_trace(y = ~Sub_metering_3, name = 'Sub metering 3') %>%
add_trace(y =~other, name = 'Other energy used') %>%
layout(yaxis = list(title = 'Energy'), barmode = 'stack') %>% labs(y= "Energy", x = "Month")
plot_ly(prova, x = c(1:12), y = ~Sub_metering_1, type = 'bar', name = 'Sub metering 1') %>%
add_trace(y = ~Sub_metering_2, name = 'Sub metering 2') %>%
add_trace(y = ~Sub_metering_3, name = 'Sub metering 3') %>%
add_trace(y =~other, name = 'Other energy used') %>%
layout(yaxis = list(title = 'Energy'), barmode = 'stack') %>% labs(y= "Energy", x= "Month")
prova = data.frame(c(1:12),mydatamonths[c(26:37),])
plot_ly(prova, x = c(1:12), y = ~Sub_metering_1, type = 'bar', name = 'Sub metering 1') %>%
add_trace(y = ~Sub_metering_2, name = 'Sub metering 2') %>%
add_trace(y = ~Sub_metering_3, name = 'Sub metering 3') %>%
add_trace(y =~other, name = 'Other energy used') %>%
layout(yaxis = list(title = 'Energy'), barmode = 'stack') %>% labs(y= "Energy", x= "Month")
prova = data.frame(c(1:12),mydatamonths[c(26:37),])
plot_ly(prova, x = c(1:12), y = ~Sub_metering_1, type = 'bar', name = 'Sub metering 1') %>%
add_trace(y = ~Sub_metering_2, name = 'Sub metering 2') %>%
add_trace(y = ~Sub_metering_3, name = 'Sub metering 3') %>%
add_trace(y =~other, name = 'Other energy used') %>%
layout(yaxis = list(title = 'Energy'), barmode = 'stack')
prova = data.frame(c(1:12),mydatamonths[c(26:37),])
plot_ly(prova, x = c(1:12), y = ~Sub_metering_1, type = 'bar', name = 'Sub metering 1') %>%
add_trace(y = ~Sub_metering_2, name = 'Sub metering 2') %>%
add_trace(y = ~Sub_metering_3, name = 'Sub metering 3') %>%
add_trace(y =~other, name = 'Other energy used') %>%
layout(yaxis = list(title = 'Energy'), barmode = 'stack') %>% layout(xaxis = "Month", yaxis = "Energy")
prova = data.frame(c(1:12),mydatamonths[c(26:37),])
plot_ly(prova, x = c(1:12), y = ~Sub_metering_1, type = 'bar', name = 'Sub metering 1') %>%
add_trace(y = ~Sub_metering_2, name = 'Sub metering 2') %>%
add_trace(y = ~Sub_metering_3, name = 'Sub metering 3') %>%
add_trace(y =~other, name = 'Other energy used') %>%
layout(yaxis = list(title = 'Energy'),xaxis = list(title = 'MOnth') , barmode = 'stack')
prova = data.frame(c(1:12),mydatamonths[c(26:37),])
plot_ly(prova, x = c(1:12), y = ~Sub_metering_1, type = 'bar', name = 'Sub metering 1') %>%
add_trace(y = ~Sub_metering_2, name = 'Sub metering 2') %>%
add_trace(y = ~Sub_metering_3, name = 'Sub metering 3') %>%
add_trace(y =~other, name = 'Other energy used') %>%
layout(yaxis = list(title = 'Energy'),xaxis = list(title = 'Month') , barmode = 'stack')
plot_ly(mydatamonths %>% filter(year=2009), x = ~month, y = ~Sub_metering_1, type = 'bar', name = 'Sub metering 1') %>%
add_trace(y = ~Sub_metering_2, name = 'Sub metering 2') %>%
add_trace(y = ~Sub_metering_3, name = 'Sub metering 3') %>%
add_trace(y =~other, name = 'Other energy used') %>%
layout(yaxis = list(title = 'Energy'),xaxis = list(title = 'Month'), title = "2009" , barmode = 'stack')
plot_ly(mydatamonths %>% filter(year==2009), x = ~month, y = ~Sub_metering_1, type = 'bar', name = 'Sub metering 1') %>%
add_trace(y = ~Sub_metering_2, name = 'Sub metering 2') %>%
add_trace(y = ~Sub_metering_3, name = 'Sub metering 3') %>%
add_trace(y =~other, name = 'Other energy used') %>%
layout(yaxis = list(title = 'Energy'),xaxis = list(title = 'Month'), title = "2009" , barmode = 'stack')
plot_ly(mydatamonths %>% filter(year==2009), x = ~month, y = ~Sub_metering_1, type = 'bar', name = 'Sub metering 1') %>%
add_trace(y = ~Sub_metering_2, name = 'Sub metering 2') %>%
add_trace(y = ~Sub_metering_3, name = 'Sub metering 3') %>%
add_trace(y =~other, name = 'Other energy used') %>%
layout(yaxis = list(title = 'Energy'),xaxis = list(title = 'Month'), title = "2009" , barmode = 'stack')
head(data)
energy = data
energy$Voltage <-NULL
energy$Global_intensity <-NULL
energy = data
energy = data
energy$Voltage <-NULL
energy$Global_intensity <-NULL
head(data)
head(energy)
mv= c()
for (i in 1:length(t))
{
if (t[i] < 178 )
{mv = c(mv, row.names(t)[i])}
}
b = which( (as.character(energy$Date) %in% mv) )
for(i in 3:7)
{
energy[b,i] = na_locf(energy[b,i], option='locf')
}
energy$season = 'winter'
energy$season[month(energy$DateTime)>2 & month(energy$DateTime) <6 ]='spring'
energy$season[month(energy$DateTime)>5 & month(energy$DateTime) <9 ]='summer'
energy$season[month(energy$DateTime)>8 & month(energy$DateTime) <12 ]='autumn'
energy$season = as.character(energy$season)
energy$weekdays = weekdays(energy$DateTime)
ll= unique(energy$season)
l = unique(energy$weekdays)
for (i in ll){
for (j in 0:23){
for (k in 1:length(l))
{
index = which( hour(energy$DateTime) == j & as.character(energy$weekdays)== l[k] & as.character(energy$season)==i  )
for (m in 3:7)
{energy[index,m] = as.numeric(impute(energy[index,m],'random'))}
}}}
# We aggregate the data
mydatamonth = mydata
mydatamonth$monthyear = format(mydata$Date, "%Y-%m")
mydatamonth$DateTime = NULL
mydatamonth$Date = NULL
mydatamonths = mydatamonth %>%  group_by(monthyear) %>%  summarize_all(sum)
mydatamonths$year = as.factor(substring(mydatamonths$monthyear,1,4))
mydatamonths$month = as.factor(substring(mydatamonths$monthyear,6,8))
# We aggregate the data
mydatamonth = mydata
mydatamonth$monthyear = format(mydata$Date, "%Y-%m")
mydatamonth$DateTime = NULL
mydatamonth$Date = NULL
mydatamonths = mydatamonth %>%  group_by(monthyear) %>%  summarize_all(sum)
mydatamonths$year = as.factor(substring(mydatamonths$monthyear,1,4))
mydatamonths$month = as.factor(substring(mydatamonths$monthyear,6,8))
energymonths = data.frame(energy %>% mutate(monthyear = format(mydata$Date, "%Y-%m")) %>% select(monthyear, Global_active_power) %>% group_by(monthyear) %>% summarize_all(sum))
energymonths = data.frame(energy %>% mutate(monthyear = format(mydata$Date, "%Y-%m")) %>% select(monthyear, Global_active_power) %>% group_by(monthyear) %>% summarize_all(sum))
View(energymonths)
energymonths = ts(energymonths[c(2:47),2], start=2007, frequency = 12)
View(mydatamonths)
View(mydatamonths)
# Create a time serie object
energymonths = data.frame(energy %>% mutate(monthyear = format(mydata$Date, "%Y-%m")) %>% select(monthyear, Global_active_power) %>% group_by(monthyear) %>% summarize_all(sum))
energymonths = ts(energymonths[c(2:47),2], start=2007, frequency = 12)
# Create the training and the test
training = subset(energymonths, start = 1 ,end = 36)
testing= subset(energymonths, start= 37, end= 47)
autoplot(energymonths)
# Create a time serie object
energymonths = data.frame(energy %>% mutate(monthyear = format(mydata$Date, "%Y-%m")) %>% select(monthyear, Global_active_power) %>% group_by(monthyear) %>% summarize_all(sum))
energymonths = ts(energymonths[c(2:47),2], start=2007, frequency = 12)
# Create the training and the test
training = subset(energymonths, start = 1 ,end = 36)
testing= subset(energymonths, start= 37, end= 47)
autoplot(energymonths)
autoplot(energymonths)+theme_minimal()
autoplot(energymonths, col = "red")+theme_minimal()
autoplot(energymonths, col = "red")+theme_minimal()+title("Train and test")
autoplot(energymonths, col = "red", title = "c")+theme_minimal()
autoplot(trining, col = "red")+theme_minimal()+autolayer(forecast1, PI = T)
autoplot(training, col = "red")+theme_minimal()+autolayer(forecast1, PI = T)
autoplot(training, col = "red")+theme_minimal()+autolayer(testing)
autoplot(training)+theme_minimal()+autolayer(testing+col = "blue")
autoplot(training)+theme_minimal()+autolayer(testing, col = "blue")
autoplot(training)+theme_minimal()+autolayer(testing, color = "blue")
g = autoplot(training)+theme_minimal()+autolayer(testing, color = "blue")
g = autoplot(training)+theme_minimal()+autolayer(testing, color = "blue")
plot(g)
fit.ets= ets(training)
summary(fit.ets)
#checkresiduals(fit.ets)
Box.test(fit.ets$residuals, lag=20, type="Ljung-Box")
forecast1=forecast(ets(energymonths),h =12)
autoplot( energymonths)+autolayer(forecast1, PI = T)
forecast1=forecast(ets(energymonths),h =12)
autoplot( energymonths)+autolayer(forecast1, PI = T)+theme_minimal()
g = autoplot(training)+theme_minimal()+autolayer(testing, color = "blue")
plot(g)
g = autoplot(training)+theme_minimal()+autolayer(testing, color = "blue")
plot(g)
g = autoplot(training)+theme_minimal()+autolayer(testing, color = "blue")
plot(g)
g = autoplot(training, color = "black")+theme_minimal()+autolayer(testing, color = "blue")
plot(g)
g = autoplot(training, color = "black")+theme_minimal()+autolayer(testing)
plot(g)
autoplot(training, color = "black")+theme_minimal()+autolayer(testing)
autoplot(training)+autolayer(testing, color = "blue")+theme_minimal()
autoplot(training)+autolayer(testing, color = "blue")+theme_minimal()
autoplot(energymonths)+theme_minimal()
autoplot(energymonths)+theme_minimal()
#checkresiduals(fit.ets)
Box.test(fit.ets$residuals, lag=20, type="Ljung-Box")
fit.arima = auto.arima(training)
summary(fit.arima)
checkresiduals(fit.arima)
checkresiduals(fit.ets)
Box.test(fit.ets$residuals, lag=20, type="Ljung-Box")
checkresiduals(fit.ets)
# We set the options for the Rmarkdown
knitr::opts_chunk$set( warning = FALSE)
# We load the libraries
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(plotly, corrplot, lubridate, hms, Hmisc, imputeTS,rstudioapi,kknn,ggplot2, randomForest, dplyr, shiny, tidyr, ggplot2, caret, forecast)
data <- read.delim("household_power_consumption.txt",header = TRUE, sep=";")
a1= accuracy(as.numeric(testing), forecast(fit.ets,h = 11)$mean)
a1= accuracy(as.numeric(testing), forecast(fit.ets,h = 11)$mean)
View(a1)
a1= accuracy(as.numeric(testing), forecast(fit.ets,h = 11)$mean)
print(a1)
forecast(fit.ets,h = 11)
a1= accuracy(as.numeric(test), forecast(fit.arima,h = 11)$mean)
a2= accuracy(as.numeric(testing), forecast(fit.arima,h = 11)$mean)
a2= accuracy(as.numeric(testing), forecast(fit.arima,h = 11)$mean)
print(a2)
fit.lm = tslm( training ~ trend + season  )
summary(fit.lm)
checkresiduals(fit.lm)
a1 = accuracy(as.numeric(test), forecast( fit.lm, h = 11)$mean)
a1 = accuracy(as.numeric(testing), forecast( fit.lm, h = 11)$mean)
a1 = accuracy(as.numeric(testing), forecast( fit.lm, h = 11)$mean)
print(a1)
# We set the options for the Rmarkdown
knitr::opts_chunk$set( warning = FALSE)
# We load the libraries
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(plotly, corrplot, lubridate, hms, Hmisc, imputeTS,rstudioapi,kknn,ggplot2, randomForest, dplyr, shiny, tidyr, ggplot2, caret, forecast)
# We set the options for the Rmarkdown
knitr::opts_chunk$set( warning = FALSE)
# We load the libraries
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(plotly, corrplot, lubridate, hms, Hmisc, imputeTS,rstudioapi,kknn,ggplot2, randomForest, dplyr, shiny, tidyr, ggplot2, caret, forecast)
# We set the options for the Rmarkdown
knitr::opts_chunk$set( warning = FALSE)
# We load the libraries
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(plotly, corrplot, lubridate, hms, Hmisc, imputeTS,rstudioapi,kknn,ggplot2, randomForest, dplyr, shiny, tidyr, ggplot2, caret, forecast)
knitr::opts_chunk$set( warning = FALSE)
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(plotly, corrplot, lubridate, hms, Hmisc, imputeTS,rstudioapi,kknn,ggplot2, randomForest, dplyr, shiny, tidyr, ggplot2, caret, forecast)
# We set the options for the Rmarkdown
knitr::opts_chunk$set( warning = FALSE)
# We load the libraries
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(plotly, corrplot, lubridate, hms, Hmisc, imputeTS,rstudioapi,kknn,ggplot2, randomForest, dplyr, shiny, tidyr, ggplot2, caret, forecast)
data <- read.delim("household_power_consumption.txt",header = TRUE, sep=";")
head(data)
data <- read.delim("household_power_consumption.txt",header = TRUE, sep=";")
head(data)
energy = data
energy$Voltage <-NULL
energy$Global_intensity <-NULL
# As before we look at number of null values per day
DATA=data[which(is.na(data$Global_reactive_power) == TRUE),]
t = table(DATA$Date)
# In the day where we have few missing values we use the previous non null value
mv= c()
for (i in 1:length(t))
{
if (t[i] < 178 )
{mv = c(mv, row.names(t)[i])}
}
DATA=data[which(is.na(data$Global_reactive_power) == TRUE),]
t = table(DATA$Date)
mv= c()
for (i in 1:length(t))
{
if (t[i] < 178 )
{mv = c(mv, row.names(t)[i])}
}
if (t[i] < 178 )
t
t
DATA=data[which(is.na(data$Global_reactive_power) == TRUE),]
t = table(DATA$Date)
t
data <- read.delim("household_power_consumption.txt",header = TRUE, sep=";")
head(data)
energy = data
energy$Voltage <-NULL
energy$Global_intensity <-NULL
# As before we look at number of null values per day
DATA=data[which(is.na(data$Global_reactive_power) == TRUE),]
t = table(DATA$Date)
# In the day where we have few missing values we use the previous non null value
mv= c()
for (i in 1:length(t))
{
if (t[i] < 178 )
{mv = c(mv, row.names(t)[i])}
}
DATA=data[which(is.na(data$Global_reactive_power) == TRUE),]
t = table(DATA$Date)
t
DATA=data[which(is.na(data$Global_reactive_power) == TRUE),]
DATA
head(data)
summary(data)
data$Global_reactive_power = suppressWarnings(as.numeric(as.character(data$Global_reactive_power)))
data$Global_active_power = suppressWarnings(as.numeric(as.character(data$Global_active_power)))
data$Sub_metering_1 = suppressWarnings(as.numeric(as.character(data$Sub_metering_1)))
data$Sub_metering_2= suppressWarnings(as.numeric(as.character(data$Sub_metering_2)))
data$Global_intensity = suppressWarnings(as.numeric(as.character(data$Global_intensity)))
data$Voltage = suppressWarnings(as.numeric(as.character(data$Voltage)))
#Change the unite measure
data$Global_active_power = data$Global_active_power * 1000 / 60
data$Global_reactive_power = data$Global_reactive_power * 1000 / 60
#create a column in the format strptime
data<-cbind(data,paste(data$Date,data$Time), stringsAsFactors=FALSE)
colnames(data)[10] <-"DateTime"
data<- data[,c(ncol(data), 1:(ncol(data)-1))]
data$DateTime <- strptime(data$DateTime, "%d/%m/%Y %H:%M:%S", tz="GMT")
data$Date <- NULL
data$Time <-NULL
#solar and legal hour
a = which(data$DateTime == as.POSIXct("2007-03-25 02:00:00", tz = "GMT") | data$DateTime ==as.POSIXct( "2007-10-28 01:59:00", tz = "GMT"))
data[a[1]:a[2],1] = data[a[1]:a[2],1]+3600
a = which(data$DateTime == as.POSIXct("2008-03-30 02:00:00", tz = "GMT") | data$DateTime ==as.POSIXct( "2008-10-26 01:59:00", tz = "GMT"))
data[a[1]:a[2],1] = data[a[1]:a[2],1]+3600
a = which(data$DateTime == as.POSIXct("2009-03-29 02:00:00", tz = "GMT") | data$DateTime ==as.POSIXct( "2009-10-25 01:59:00", tz = "GMT"))
data[a[1]:a[2],1] = data[a[1]:a[2],1]+3600
a = which(data$DateTime == as.POSIXct("2010-03-28 02:00:00", tz = "GMT") | data$DateTime ==as.POSIXct( "2010-10-31 01:59:00", tz = "GMT"))
data[a[1]:a[2],1] = data[a[1]:a[2],1]+3600
# Recreate the date column and reorder the order of the columns.
data$Date <- as.Date(data$DateTime)
data=data[,c(1,9,2:8)]
energy = data
energy$Voltage <-NULL
energy$Global_intensity <-NULL
# As before we look at number of null values per day
DATA=data[which(is.na(data$Global_reactive_power) == TRUE),]
t = table(DATA$Date)
# In the day where we have few missing values we use the previous non null value
mv= c()
for (i in 1:length(t))
{
if (t[i] < 178 )
{mv = c(mv, row.names(t)[i])}
}
b = which( (as.character(energy$Date) %in% mv) )
for(i in 3:7)
{
energy[b,i] = na_locf(energy[b,i], option='locf')
}
# For the rest of the missing values, we consider all the values of energy, that were registered in the different years in the same season, weekday and minute, and we subtitute a random value from them.
energy$season = 'winter'
energy$season[month(energy$DateTime)>2 & month(energy$DateTime) <6 ]='spring'
energy$season[month(energy$DateTime)>5 & month(energy$DateTime) <9 ]='summer'
energy$season[month(energy$DateTime)>8 & month(energy$DateTime) <12 ]='autumn'
energy$season = as.character(energy$season)
energy$weekdays = weekdays(energy$DateTime)
ll= unique(energy$season)
l = unique(energy$weekdays)
for (i in ll){
for (j in 0:23){
for (k in 1:length(l))
{
index = which( hour(energy$DateTime) == j & as.character(energy$weekdays)== l[k] & as.character(energy$season)==i  )
for (m in 3:7)
{energy[index,m] = as.numeric(impute(energy[index,m],'random'))}
}}}
